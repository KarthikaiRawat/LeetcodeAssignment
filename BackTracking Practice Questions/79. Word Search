https://leetcode.com/problems/word-search/description/

class Solution {
    public boolean exist(char[][] board, String word) {
        for(int i=0;i<board.length;i++)
        {
            for(int j=0;j<board[0].length;j++)
            {
                if(isMatch(i,j,board,word))
                {
                    return true;
                }
            }
        }
        return false;
        
    }
    static boolean valid=false;
    
    public static boolean isMatch(int row, int col,char[][] board, String word) {
        if (word.length() == 0) {
            return true;
        }

        if (row >= 0 && row < board.length && col >= 0 && col < board[0].length && board[row][col] == word.charAt(0)) {
            board[row][col] = '#';
            int[][] directions = {
                    { 0, 1 }, // right
                    { 1, 0 }, // down
                    { 0, -1 }, // left
                    { -1, 0 } // up
            };
            for (int i = 0; i < directions.length; i++) {
                int rowd = directions[i][0];
                int cold = directions[i][1];

                valid = isMatch(row + rowd, col + cold,board, word.substring(1));
                if (valid) {
                    break;

                }

            }
            board[row][col] = word.charAt(0);
            return valid;

        } else {
            return false;
        }

    }
}
  
